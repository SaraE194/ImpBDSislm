SELECT 'Lápiz' AS Producto, 1 AS Cantidad UNION ALL
    -> SELECT 'Lápiz', 1 UNION ALL
    -> SELECT 'Lápiz', 1 UNION ALL
    -> SELECT 'Borrador', 1 UNION ALL
    -> SELECT 'Borrador', 1 UNION ALL
    -> SELECT 'Borrador', 1 UNION ALL
    -> SELECT 'Borrador', 1 UNION ALL
    -> SELECT 'Cuaderno', 1 UNION ALL
    -> SELECT 'Cuaderno', 1;





WITH asientos_ext AS (
  SELECT 0 AS num_asiento
  UNION ALL
  SELECT num_asiento FROM asientos
)
SELECT 
    a.num_asiento + 1 AS espacio_inicio,
    (SELECT MIN(b.num_asiento) - 1 
     FROM asientos_ext b 
     WHERE b.num_asiento > a.num_asiento) AS espacio_final
FROM asientos_ext a
WHERE EXISTS (
    SELECT 1 FROM asientos_ext b 
    WHERE b.num_asiento > a.num_asiento AND b.num_asiento > a.num_asiento + 1
)
AND (SELECT MIN(b.num_asiento) - 1 
     FROM asientos_ext b 
     WHERE b.num_asiento > a.num_asiento) >= a.num_asiento + 1
ORDER BY espacio_inicio;



WITH asientos_ext AS (
    SELECT 0 AS num_asiento
    UNION ALL
    SELECT num_asiento FROM asientos
)
SELECT SUM(espacio_final - espacio_inicio + 1) AS disponibles
FROM (
    SELECT 
        a.num_asiento + 1 AS espacio_inicio,
        (SELECT MIN(b.num_asiento) - 1 
         FROM asientos_ext b 
         WHERE b.num_asiento > a.num_asiento) AS espacio_final
    FROM asientos_ext a
    WHERE EXISTS (
        SELECT 1 
        FROM asientos_ext b 
        WHERE b.num_asiento > a.num_asiento AND b.num_asiento > a.num_asiento + 1
    )
) AS espacios
WHERE espacio_final >= espacio_inicio;



SELECT 
    IF(num_asiento % 2 = 0, 'pares', 'impares') AS tipo,
    COUNT(*) AS total
FROM asientos
GROUP BY tipo;






SET @inicio := NULL;
SET @final := NULL;
SET @grupo := 0;

SELECT MIN(inicio) AS Inicio, MAX(final) AS Final
FROM (
  SELECT inicio, final,
    @grupo := IF(@inicio IS NULL OR inicio > DATE_ADD(@final, INTERVAL 0 DAY),
                 @grupo + 1, @grupo) AS grupo,
    @inicio := IF(@inicio IS NULL OR inicio > DATE_ADD(@final, INTERVAL 0 DAY),
                  inicio, @inicio),
    @final := IF(@final IS NULL OR inicio > DATE_ADD(@final, INTERVAL 0 DAY),
                 final, IF(final > @final, final, @final)) AS final_update
  FROM vf
  ORDER BY inicio
) AS fusionado
GROUP BY grupo
ORDER BY inicio;
